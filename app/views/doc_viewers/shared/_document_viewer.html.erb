<div class="document-preview-viewer grid grid-rows-[auto,1fr] h-full bg-gray-50 border border-gray-200 rounded-lg overflow-hidden"
     data-controller="document-preview--viewer"
     data-document-preview--viewer-file-url-value="<%= file_url %>"
     data-document-preview--viewer-doc-type-value="<%= doc_type %>"
     data-document-preview--viewer-initial-page-value="<%= initial_page %>"
     data-document-preview--viewer-download-name-value="<%= download_name %>"
     <% if defined?(image_urls) && image_urls %>data-document-preview--viewer-image-urls-value='<%= image_urls.to_json %>'<% end %>>
  
  <!-- Toolbar -->
  <div class="document-preview-toolbar flex items-center justify-between px-4 py-2 bg-white border-b border-gray-200 shadow-sm backdrop-blur-sm">
    <div class="flex items-center space-x-4">
      <!-- Navigation -->
      <div class="flex items-center space-x-1">
        <button type="button" 
                data-action="click->document-preview--viewer#previousPage"
                data-document-preview--viewer-target="prevBtn"
                class="p-1 rounded hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
                title="Page précédente (←)">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <button type="button" 
                data-action="click->document-preview--viewer#nextPage"
                data-document-preview--viewer-target="nextBtn"
                class="p-1 rounded hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
                title="Page suivante (→)">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>

      <!-- Page info -->
      <div class="flex items-center space-x-2 text-sm text-gray-600">
        <span>Page</span>
        <input type="number" 
               data-document-preview--viewer-target="pageInput"
               data-action="change->document-preview--viewer#goToPage"
               class="w-12 px-1 py-0.5 text-center border border-gray-300 rounded text-sm"
               min="1">
        <span>sur</span>
        <span data-document-preview--viewer-target="totalPages">-</span>
      </div>
    </div>

    <div class="flex items-center space-x-4">
      <!-- Zoom controls -->
      <div class="flex items-center space-x-1">
        <button type="button" 
                data-action="click->document-preview--viewer#zoomOut"
                class="p-1 rounded hover:bg-gray-100"
                title="Zoom arrière (Ctrl + -)">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
          </svg>
        </button>
        
        <span class="text-sm text-gray-600 min-w-[60px] text-center" data-document-preview--viewer-target="zoomLevel">100%</span>
        
        <button type="button" 
                data-action="click->document-preview--viewer#zoomIn"
                class="p-1 rounded hover:bg-gray-100"
                title="Zoom avant (Ctrl + +)">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
        </button>
      </div>

      <!-- Fullscreen toggle -->
      <button type="button" 
              data-action="click->document-preview--viewer#toggleFullscreen"
              class="p-1 rounded hover:bg-gray-100"
              title="Plein écran">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
        </svg>
      </button>

      <!-- Download -->
      <button type="button" 
              data-action="click->document-preview--viewer#downloadDocument"
              class="p-1 rounded hover:bg-gray-100"
              title="Télécharger">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Canvas/Content area -->
  <div class="document-preview-canvas flex-1 overflow-hidden bg-gray-100 flex items-center justify-center">
    <div data-document-preview--viewer-target="loadingIndicator" class="text-gray-500">
      <svg class="w-8 h-8 animate-spin mx-auto mb-2" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="text-sm">Chargement du document...</p>
    </div>
    
    <div data-document-preview--viewer-target="errorMessage" class="hidden text-red-500 text-center">
      <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <p class="text-sm">Erreur lors du chargement du document</p>
    </div>
    
    <!-- PDF Canvas -->
    <canvas data-document-preview--viewer-target="pdfCanvas" class="hidden max-w-full max-h-full shadow-lg"></canvas>
    
    <!-- DOCX Content -->
    <div data-document-preview--viewer-target="docxContent" class="hidden w-full h-full overflow-auto p-4 bg-white"></div>
    
    <!-- Image Content -->
    <div data-document-preview--viewer-target="imageContainer" class="hidden w-full h-full overflow-auto flex items-center justify-center">
      <img data-document-preview--viewer-target="imageContent" class="max-w-full max-h-full shadow-lg" alt="<%= download_name %>">
    </div>
  </div>
</div>

<script type="module">
  // Only define the controller once globally
  if (!window.DocumentPreviewViewerController) {
    const { Controller } = await import("https://unpkg.com/@hotwired/stimulus@3.2.2/dist/stimulus.js")
    
    window.DocumentPreviewViewerController = class extends Controller {
      static targets = [
        "loadingIndicator", "errorMessage", "pdfCanvas", "docxContent", 
        "imageContainer", "imageContent", "prevBtn", "nextBtn", 
        "pageInput", "totalPages", "zoomLevel"
      ]

      static values = {
        fileUrl: String,
        docType: String,
        initialPage: Number,
        downloadName: String,
        imageUrls: Array
      }

      connect() {
        this.currentPage = this.initialPageValue || 1
        this.totalPages = 1
        this.scale = 1.0
        this.pdfDocument = null
        this.renderTask = null
        this.renderPending = false
        
        // Create a unique canvas ID for this instance
        this.canvasId = `pdf-canvas-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
        
        this.loadDocument()
      }

      disconnect() {
        // Clean up any ongoing render task
        if (this.renderTask) {
          this.renderTask.cancel()
          this.renderTask = null
        }
      }

      async loadDocument() {
        try {
          this.showLoading()
          await this.initializeDocumentType()
          this.hideLoading()
          this.updateUI()
        } catch (error) {
          this.showError()
        }
      }

      async initializeDocumentType() {
        switch(this.docTypeValue) {
          case 'image':
          case 'images':
            await this.initializeImages()
            break
          case 'pdf':
            await this.initializePDF()
            break
          case 'docx':
            await this.initializeDOCX()
            break
        }
      }

      async initializeImages() {
        if (this.hasImageUrlsValue && this.imageUrlsValue.length > 0) {
          this.totalPages = this.imageUrlsValue.length
          const currentImageUrl = this.imageUrlsValue[this.currentPage - 1]
          await this.loadSingleImage(currentImageUrl)
        } else {
          this.totalPages = 1
          await this.loadSingleImage(this.fileUrlValue)
        }
      }

      async loadSingleImage(imageUrl) {
        return new Promise((resolve, reject) => {
          if (!this.hasImageContentTarget) {
            reject(new Error('Image container not found'))
            return
          }

          this.imageContentTarget.onload = () => {
            this.showImageContainer()
            resolve()
          }

          this.imageContentTarget.onerror = () => {
            reject(new Error(`Failed to load image: ${imageUrl}`))
          }

          this.imageContentTarget.src = imageUrl
        })
      }

      async initializePDF() {
        try {
          const pdfLib = await this.waitForPDFLib()
          if (!pdfLib) {
            throw new Error('PDF.js library not loaded')
          }

          const loadingTask = pdfLib.getDocument(this.fileUrlValue)
          this.pdfDocument = await loadingTask.promise
          this.totalPages = this.pdfDocument.numPages

          await this.renderPDFPage()
          this.showPDFCanvas()
        } catch (error) {
          this.showContent(`Error loading PDF: ${error.message}`)
        }
      }

      async waitForPDFLib() {
        let pdfLib = window.pdfjsLib || window.pdfjs
        
        if (!pdfLib) {
          await new Promise(resolve => setTimeout(resolve, 500))
          pdfLib = window.pdfjsLib || window.pdfjs
        }
        
        return pdfLib
      }

      async renderPDFPage() {
        if (!this.pdfDocument || !this.hasPdfCanvasTarget) return

        // Prevent multiple concurrent renders
        if (this.renderPending) {
          return
        }
        
        this.renderPending = true

        try {
          // Cancel any existing render task
          if (this.renderTask) {
            this.renderTask.cancel()
            try {
              await this.renderTask.promise
            } catch (e) {
              // Ignore cancellation errors
            }
            this.renderTask = null
          }

          const page = await this.pdfDocument.getPage(this.currentPage)
          const viewport = page.getViewport({ scale: this.scale })
          
          // Debug: log the actual scale being used
          console.log(`Rendering PDF page ${this.currentPage} with scale: ${this.scale}, viewport size: ${viewport.width}x${viewport.height}`)

          // Create a completely new canvas element for this render
          const newCanvas = document.createElement('canvas')
          newCanvas.width = viewport.width
          newCanvas.height = viewport.height
          newCanvas.className = this.pdfCanvasTarget.className

          // Replace the old canvas with the new one
          this.pdfCanvasTarget.parentNode.replaceChild(newCanvas, this.pdfCanvasTarget)
          
          // Update the target reference
          newCanvas.setAttribute('data-document-preview--viewer-target', 'pdfCanvas')
          
          // Remove any existing transform (we use PDF.js scale instead of CSS)
          newCanvas.style.transform = 'none'
          
          const context = newCanvas.getContext('2d')

          const renderContext = {
            canvasContext: context,
            viewport: viewport
          }

          this.renderTask = page.render(renderContext)
          await this.renderTask.promise
          this.renderTask = null
          
        } catch (error) {
          this.renderTask = null
          if (error.name !== 'RenderingCancelledException') {
            console.warn('PDF render error:', error)
          }
        } finally {
          this.renderPending = false
        }
      }

      async initializeDOCX() {
        this.showContent('DOCX viewer will be implemented with Mammoth.js')
      }

      async previousPage() {
        if (this.currentPage > 1) {
          this.currentPage--
          await this.renderCurrentPage()
          this.updateUI()
        }
      }

      async nextPage() {
        if (this.currentPage < this.totalPages) {
          this.currentPage++
          await this.renderCurrentPage()
          this.updateUI()
        }
      }

      async goToPage() {
        const pageNumber = parseInt(this.pageInputTarget.value)
        if (pageNumber >= 1 && pageNumber <= this.totalPages) {
          this.currentPage = pageNumber
          await this.renderCurrentPage()
          this.updateUI()
        }
      }

      async renderCurrentPage() {
        if (this.docTypeValue === 'pdf' && this.pdfDocument) {
          await this.renderPDFPage()
        } else if (this.isImageType() && this.hasImageUrlsValue && this.imageUrlsValue.length > 0) {
          const currentImageUrl = this.imageUrlsValue[this.currentPage - 1]
          if (currentImageUrl) {
            await this.loadSingleImage(currentImageUrl)
          }
        }
      }

      isImageType() {
        return this.docTypeValue === 'images' || this.docTypeValue === 'image'
      }

      async zoomIn() {
        this.scale = Math.min(this.scale + 0.25, 3.0)
        await this.applyZoom()
        this.updateUI()
      }

      async zoomOut() {
        this.scale = Math.max(this.scale - 0.25, 0.25)
        await this.applyZoom()
        this.updateUI()
      }

      async applyZoom() {
        if (this.docTypeValue === 'pdf' && this.pdfDocument) {
          await this.renderPDFPage()
        } else if (this.hasImageContentTarget) {
          this.imageContentTarget.style.transform = `scale(${this.scale})`
        }
      }

      toggleFullscreen() {
        if (typeof screenfull !== 'undefined' && screenfull.isEnabled) {
          if (screenfull.isFullscreen) {
            screenfull.exit()
          } else {
            screenfull.request(this.element)
          }
        }
      }

      downloadDocument() {
        const link = document.createElement('a')
        link.href = this.fileUrlValue
        link.download = this.downloadNameValue || 'document'
        link.click()
      }

      showLoading() {
        if (this.hasLoadingIndicatorTarget) this.loadingIndicatorTarget.classList.remove('hidden')
        this.hideAllContent()
      }

      hideLoading() {
        if (this.hasLoadingIndicatorTarget) this.loadingIndicatorTarget.classList.add('hidden')
      }

      showError() {
        this.hideLoading()
        this.hideAllContent()
        if (this.hasErrorMessageTarget) this.errorMessageTarget.classList.remove('hidden')
      }

      showContent(text) {
        this.hideAllContent()
        if (this.hasDocxContentTarget) {
          this.docxContentTarget.innerHTML = `<p class="text-center text-gray-600 p-8">${text}</p>`
          this.docxContentTarget.classList.remove('hidden')
        }
      }

      showImageContainer() {
        this.hideAllContent()
        if (this.hasImageContainerTarget) this.imageContainerTarget.classList.remove('hidden')
      }

      showPDFCanvas() {
        this.hideAllContent()
        if (this.hasPdfCanvasTarget) this.pdfCanvasTarget.classList.remove('hidden')
      }

      hideAllContent() {
        const targets = ['pdfCanvas', 'docxContent', 'imageContainer', 'errorMessage']
        targets.forEach(targetName => {
          const hasMethod = `has${targetName.charAt(0).toUpperCase() + targetName.slice(1)}Target`
          const targetProperty = `${targetName}Target`
          if (this[hasMethod] && this[targetProperty]) {
            this[targetProperty].classList.add('hidden')
          }
        })
      }

      updateUI() {
        if (this.hasPageInputTarget) this.pageInputTarget.value = this.currentPage
        if (this.hasTotalPagesTarget) this.totalPagesTarget.textContent = this.totalPages
        if (this.hasZoomLevelTarget) this.zoomLevelTarget.textContent = Math.round(this.scale * 100) + '%'

        if (this.hasPrevBtnTarget) this.prevBtnTarget.disabled = this.currentPage <= 1
        if (this.hasNextBtnTarget) this.nextBtnTarget.disabled = this.currentPage >= this.totalPages
      }
    }

    // Register the controller with Stimulus
    if (!window.stimulusApplication) {
      const { Application } = await import("https://unpkg.com/@hotwired/stimulus@3.2.2/dist/stimulus.js")
      window.stimulusApplication = Application.start()
    }
    
    if (!window.stimulusApplication.router.modules.find(m => m.identifier === "document-preview--viewer")) {
      window.stimulusApplication.register("document-preview--viewer", window.DocumentPreviewViewerController)
    }
  }
</script>